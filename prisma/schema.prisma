generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CHURCH_OWNER
  CHURCH_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

model User {
  id            String         @id @default(uuid())
  name          String
  image         String?
  email         String         @unique
  emailVerified Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          Role           @default(SUBACCOUNT_USER)
  churchId      String?
  church        Church?        @relation(fields: [churchId], references: [id], onDelete: Cascade)
  permissions   Permissions[]
  notifications Notification[]
  sessions       Session[]
  accounts      Account[]
  
  @@index([churchId])
  @@map("user")
}

model Permissions {
  id            String      @id @default(uuid())
  email         String
  user          User        @relation(fields: [email], references: [email], onDelete: Cascade)
  subAccountId  String
  subAccount    SubAccount  @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  access        Boolean
  
  @@index([subAccountId])
  @@index([email])
}


model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Church {
  id                  String              @id @default(uuid())
  connectAccountId    String?
  customerId          String              @default("")
  name                String              @default("")
  churchLogo          String              @db.Text
  companyEmail        String              @db.Text
  companyPhone        String
  whitelabel          Boolean             @default(true)
  address             String
  city                String
  zipCode             String
  state               String
  country             String
  goal                Int                 @default(5)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  users               User[]              @relation
  sidebarOptions      ChurchSidebarOption[]
  subAccounts         SubAccount[]
  invitations         Invitation[]
  notifications       Notification[]
  subscription        Subscription?
  addOns              AddOns[]
  
  @@map("church")
}

model SubAccount {
  id                String                  @id @default(uuid())
  name              String                  @default("")
  connectAccountId  String?
  subAccountLogo    String                  @db.Text
  companyEmail      String                  @db.Text
  companyPhone      String
  address           String
  city              String
  zipCode           String
  state             String
  country           String
  goal              Int                     @default(5)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  churchId          String
  church            Church                  @relation(fields: [churchId], references: [id], onDelete: Cascade)
  sidebarOptions    SubAccountSidebarOption[]
  permissions       Permissions[]
  // media             Media[]
  // contacts          Contact[]
  notifications     Notification[]
  
  @@index([churchId])
}

model ChurchSidebarOption {
  id        String     @id @default(uuid())
  name      String     @default("Menu")
  link      String     @default("#")
  //icon      Icon       @default(info)
  churchId  String
  church    Church?    @relation(fields: [churchId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  @@index([churchId])
  @@map("church_sidebar_option")
}

model SubAccountSidebarOption {
  id            String         @id @default(uuid())
  name          String         @default("Menu")
  link          String         @default("#")
  //icon          Icon           @default(info)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subAccount    SubAccount?    @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId  String?
  
  @@index([subAccountId])
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id        String           @id @default(uuid())
  email     String           @unique
  churchId  String
  church    Church           @relation(fields: [churchId], references: [id], onDelete: Cascade)
  status    InvitationStatus @default(PENDING)
  role      Role             @default(SUBACCOUNT_USER)
  
  @@index([churchId])
  @@map("invitation")
}

model Notification {
  id            String        @id @default(uuid())
  notification  String
  churchId      String
  userId        String
  subAccountId  String?
  church        Church        @relation(fields: [churchId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subAccount    SubAccount?   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([churchId])
  @@index([subAccountId])
  @@index([userId])
  @@map("notification")
}

enum Plan {
  price_10MhuQIld5Bk5htqogZXP2e
  price_10MhtcIldSBk5htqx5CvFSmj
}

model Subscription {
  id               String     @id @default(uuid())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  plan             Plan?
  price            String?
  active           Boolean    @default(false)
  priceId          String
  customerId       String
  currentPeriodEnd DateTime
  subscriptionId   String     @unique
  churchId         String?    @unique
  church           Church?    @relation(fields: [churchId], references: [id])
  
  @@index([customerId])
  @@map("subscription")
}

model AddOns {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  active    Boolean    @default(false)
  priceId   String     @unique
  churchId  String?
  church    Church?    @relation(fields: [churchId], references: [id])
  
  @@index([churchId])
  @@map("add_ons")
}

model Member {
  id              Int       @id @default(autoincrement())
  mobile_number   String?
  member_id       String    @unique
  first_name      String?
  middle_name     String?
  last_name       String?
  email           String?
  gender          String?
  birthday        DateTime?
  address         String?
  address_line_1  String?
  address_line_2  String?
  city            String?
  state           String?
  zip_code        String?
  membership_status String  @default("active")
  profile_photo   String?
  member_tags     Json?
  qr_code         String?
  additional_info Json?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  // Indexes for optimization
  @@index([membership_status])
  @@index([mobile_number])
}